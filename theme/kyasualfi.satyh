%% kyasualfi.satyh
%%
%% SLyDIFi theme file.
%%
%% This slide theme is heavily inspired by the arctic.satyh theme.
%% [arctic.satyh](https://github.com/monaqa/slydifi/blob/master/src/theme/arctic.satyh): Copyright (c) 2021 comonaqa <mogassy@yahoo.co.jp>
%% https://github.com/monaqa/slydifi/blob/master/src/theme/arctic.satyh

@require: gr
@require: annot
@require: railway/railway
@require: base/color-ext
@require: base/int
@require: base/float
@require: base/typeset/base
@require: class-slydifi/slydifi
@require: class-slydifi/footnote
@require: enumitem/enumitem
@require: colorbox/colorbox
@require: figbox/figbox
@require: math
@require: code
@require: code-printer/code-printer
@require: code-printer/code-theme
@require: code-printer/code-syntax
@require: base/typeset/satysfi-it
@require: derive/derive


open Colorbox
% open SlydifiOverlay


type arctic-config = (|
  %% font
  font-normal : context -> context;
  font-bold : context -> context;
  font-code : context -> context;
  font-slide-title : context -> context;
  font-slide-author : context -> context;
  font-slide-date : context -> context;
  font-section-title : context -> context;
  font-frame-title : context -> context;
  font-pagenum-now : context -> context;
  font-pagenum-total : context -> context;
  font-footnote : context -> context;
  font-quote : context -> context;
  font-block-normal : context -> context;

  %% color
  % kyasualize
  color-normal-fg : color;
  color-normal-bg : color;
  color-block-fg : color;
  color-block-bg : color;
  color-alert-fg : color;
  color-alert-bg : color;
  color-example-fg : color;
  color-example-bg : color;
  % frame template
  color-separator : color;
  color-indicator-total : color;
  color-indicator-done : color;
  % decoration
  color-quote : color;
  color-quote-line : color;
  % listing
  color-bullet-dia : color;
  color-bullet-tria : color;
  color-bullet-circ : color;
  color-bullet-thus : color;
  color-bullet-ok : color;

  %% length
  length-frame-title-height : length;
  length-frame-title-left-margin : length;
  length-frame-title-bot-margin : length;
  length-frame-body-top-margin : length;
  length-indicator-line-thickness: length;
  length-frame-footer-xmargin: length;
  length-frame-footer-ymargin: length;
|)

module SlydifiThemeArctic: sig

  val layout: frame-layout
  val document: block-text -> document

% config

  val default-config: arctic-config
  val config: arctic-config SlydifiParam.t
  direct +set-config : [arctic-config] block-cmd
  direct \set-config : [arctic-config] inline-cmd
  direct +with-config : [arctic-config; block-text] block-cmd
  direct \with-config : [arctic-config; inline-text] inline-cmd

% frames
  %% スライドマスター。
  val frame-master: arctic-config -> unit Frame.frame
  %% ページ番号の付いたスライドマスター。
  val frame-master-with-footer: arctic-config -> unit Frame.frame
  %% スライド全体のタイトルフレーム。
  %% title: スライドのタイトル
  %% title: スライドのタイトル
  val frame-slide-title: arctic-config ->
    ((| title: inline-text list; author: inline-text list; date: inline-text list|))
      Frame.frame
  %% セクションフレーム。
  val frame-section-title: arctic-config -> ((| title: inline-text list; |)) Frame.frame
  %% タイトルフレーム。
  val frame-normal: arctic-config -> ((| title: inline-text; inner: block-text; footer: bool |)) Frame.frame

% frame commands
  %% frame-slide-title に従ってタイトルスライドを生成する。
  direct +make-title : [(| title: inline-text list; author: inline-text list; date: inline-text list|);] block-cmd
  %% frame-section-title に従って通常のスライドを生成する。
  direct +section : [inline-text?; inline-text list; block-text;] block-cmd

  direct +section-noframe : [inline-text?; block-text;] block-cmd
  %% frame-normal に従って通常のスライドを生成する。
  direct +frame : [int?; inline-text; block-text;] block-cmd
  direct +frame-nofooter : [int?; inline-text; block-text;] block-cmd
  direct +namedframe : [string; inline-text; block-text;] block-cmd
  direct +againframe : [int?; string] block-cmd
  direct +centering : [inline-text] block-cmd

% decoration commands
  direct \emph : [(int -> bool)?; inline-text] inline-cmd
  direct \textbf : [(int -> bool)?; inline-text] inline-cmd
  direct \link : [inline-text?; string] inline-cmd
  direct \code : [string] inline-cmd
  direct +quote : [block-text] block-cmd

% listing
  val listing-itemfmt : context -> int list -> itemconfig
  direct +listing : [(context -> int list -> itemconfig)?; itemize] block-cmd
  direct \listing : [(context -> int list -> itemconfig)?; itemize] inline-cmd
  direct +itemize : [(context -> int list -> itemconfig)?; block-text] block-cmd
  direct +ditem: [inline-text; inline-text; block-text] block-cmd
  direct +oitem : [(int -> bool); inline-text; block-text] block-cmd
  direct +thuslisting : [(context -> int list -> itemconfig)?; itemize] block-cmd
  direct \thuslisting : [(context -> int list -> itemconfig)?; itemize] inline-cmd
  val \label-dia : [] inline-cmd
  val \label-tria : [] inline-cmd
  val \label-circ : [] inline-cmd
  val \label-thus : [] inline-cmd
  val \label-ok : [] inline-cmd
  direct +thusitem :[inline-text; block-text] block-cmd
  direct +okitem :[inline-text; block-text] block-cmd

% 脚注
  direct \footnote : [inline-text] inline-cmd
  direct \footnotetext : [string; inline-text] inline-cmd
  direct \footnotemark : [string] inline-cmd

% code
  direct +code : [CodePrinter.syntax; string] block-cmd

% block
 direct +block : [inline-text?; string?; Colorbox.colorbox-option list?; inline-text] block-cmd
 direct +alertblock : [inline-text?; string?; Colorbox.colorbox-option list?; inline-text] block-cmd
 direct +exampleblock : [inline-text?; string?; Colorbox.colorbox-option list?; inline-text] block-cmd

  direct +defn : [inline-text?; string?; Colorbox.colorbox-option list?; inline-text] block-cmd
  direct +thm : [inline-text?; string?; Colorbox.colorbox-option list?; inline-text] block-cmd
  direct +cor : [inline-text?; string?; Colorbox.colorbox-option list?; inline-text] block-cmd
  direct +lem : [inline-text?; string?; Colorbox.colorbox-option list?; inline-text] block-cmd

end = struct

  let section-name = SlydifiParam.make {}

  let page-num = SlydifiParam.make 0

  let layout = (|
    paper-width = 254mm;
    paper-height = 158.8mm; % 16:10
    text-width = 254mm -' 40pt;
    text-height = 158.8mm -' 30pt;
    text-horizontal-margin = 20pt;
    text-vertical-margin = 10pt;
  |)
  let xrel xfloat = layout#paper-width *' xfloat
  let yrel yfloat = layout#paper-height *' yfloat
  let rel xfloat yfloat = (xrel xfloat, yrel yfloat)

% configuration

  let set-font-metrics fsize ctx =
    ctx |> set-font-size fsize
        |> set-paragraph-margin (fsize *' 0.75) (fsize *' 0.75)
        |> set-min-gap-of-lines 0pt
        |> set-leading (fsize *' 1.4)

  let default-config =
    let default-font ctx =
    ctx |> set-font Latin          (`fonts-noto-sans:NotoSans-Regular`, 1.0, 0.0)
        |> set-font Kana           (`fonts-noto-sans-cjk-jp:NotoSansCJKjp-Regular`, 1.0, 0.0)
        |> set-font HanIdeographic (`fonts-noto-sans-cjk-jp:NotoSansCJKjp-Regular`, 1.0, 0.0)
    in
    let code-font ctx =
      ctx |> set-font Latin          (`lmmono`, 1.0, 0.0)
          |> set-font Kana           (`lmmono`, 1.0, 0.0)
          |> set-font HanIdeographic (`lmmono`, 1.0, 0.0)
          |> set-space-ratio 0.5 0.5 0.5  % mplus の space ratio に合わせる
          |> set-hyphen-min 1000 1000  % ハイフンを無効化
          |> set-space-ratio-between-scripts 0. 0. 0. Latin Kana
          |> set-space-ratio-between-scripts 0. 0. 0. Kana Latin
          |> set-space-ratio-between-scripts 0. 0. 0. Latin HanIdeographic
          |> set-space-ratio-between-scripts 0. 0. 0. HanIdeographic Latin
    in
    let bold-font ctx =
      ctx |> set-font Latin          (`fonts-noto-sans:NotoSans-Bold`, 1.0, 0.0)
          |> set-font Kana           (`fonts-noto-sans-cjk-jp:NotoSansCJKjp-Bold`, 1.0, 0.0)
          |> set-font HanIdeographic (`fonts-noto-sans-cjk-jp:NotoSansCJKjp-Bold`, 1.0, 0.0)
    in
    let light-font ctx =
      ctx |> set-font Latin          (`fonts-noto-sans:NotoSans-Regular`, 1.0, 0.0)
          |> set-font Kana           (`fonts-noto-sans-cjk-jp:NotoSansCJKjp-Regular`, 1.0, 0.0)
          |> set-font HanIdeographic (`fonts-noto-sans-cjk-jp:NotoSansCJKjp-Regular`, 1.0, 0.0)
    in

    (|
      %% font
      font-normal = SlydifiScheme.apply-font-cfg [default-font; set-font-metrics 24pt];
      font-bold = SlydifiScheme.apply-font-cfg [bold-font];
      font-code = SlydifiScheme.apply-font-cfg [code-font];
      font-slide-title = SlydifiScheme.apply-font-cfg [bold-font; set-font-metrics 41pt];
      font-slide-author = SlydifiScheme.apply-font-cfg [default-font; set-font-metrics 24pt;];
      font-slide-date = SlydifiScheme.apply-font-cfg [default-font; set-font-metrics 24pt;];
      font-section-title = SlydifiScheme.apply-font-cfg [bold-font; set-font-metrics 32pt];
      font-frame-title = SlydifiScheme.apply-font-cfg [bold-font; set-font-metrics 32pt];
      font-pagenum-now = SlydifiScheme.apply-font-cfg [default-font; set-font-metrics 24pt;];
      font-pagenum-total = SlydifiScheme.apply-font-cfg [default-font; set-font-metrics 14pt;];
      font-footnote = SlydifiScheme.apply-font-cfg [default-font; set-font-metrics 12pt;];
      font-quote = SlydifiScheme.apply-font-cfg [default-font; set-font-metrics 20pt;];
      font-block-normal = SlydifiScheme.apply-font-cfg [default-font; set-font-metrics 20pt];

      %% color
      % kyasualize
      color-normal-fg = Color.of-css `#3c372d`;
      color-normal-bg = Color.of-css `#fffefa`;
      color-block-fg = Color.of-css `#462d28`;
      color-block-bg = Color.of-css `#fffae6`;
      color-alert-fg = Color.of-css `#732346`;
      color-alert-bg = Color.of-css `#e5c3be`;
      color-example-fg = Color.of-css `#5a7323`;
      color-example-bg = Color.of-css `#e1f0c8`;
      % frame template
      color-separator = Color.of-css `#6b7089`;
      color-indicator-total = Color.of-css `#e5c3be`;
      color-indicator-done = Color.of-css `#732346`;
      % listing
      color-bullet-dia = Color.of-css `#3c372d`;
      color-bullet-tria = Color.of-css `#3c372d`;
      color-bullet-circ = Color.of-css `#3c372d`;
      color-bullet-thus = Color.of-css `#5a7323`;
      color-bullet-ok = Color.of-css `#732346`;
      % quotation
      color-quote = (Color.of-css `#33374c`) |> color-inner ?:0.15 (Color.of-css `#e8e9ec`);
      color-quote-line = (Color.of-css `#33374c`) |> color-inner ?:0.7 (Color.of-css `#e8e9ec`);

      %% length
      length-frame-title-height = 36pt;
      length-frame-title-left-margin = 20pt;
      length-frame-title-bot-margin = 10pt;
      length-frame-body-top-margin = 14pt;
      length-indicator-line-thickness = 5pt;
      length-frame-footer-xmargin = 10pt;
      length-frame-footer-ymargin = 8pt;
    |)

  let config = SlydifiParam.make default-config

  let-block +set-config cfg = '< +SlydifiParam.set-param(config)(cfg); >
  let-inline \set-config cfg = { \SlydifiParam.set-param(config)(cfg); }
  let-block +with-config cfg bt = '< +SlydifiParam.with-param(config)(cfg)(bt); >
  let-inline \with-config cfg it = { \SlydifiParam.with-param(config)(cfg)(it); }

% document

  let-inline ctx \code code =
    let config = SlydifiParam.get config in
    let ctx =
      ctx |> config#font-code
          |> set-text-color config#color-normal-fg
    in
    let fsize = get-font-size ctx in
    let dpt = fsize *' 0.3 in
    let hgt = fsize *' 1.0 in
    let pads = (fsize *' 0.15, fsize *' 0.15, fsize *' 0.0, fsize *' 0.0) in

    let rectangle-round-fill r extra color =
      let decoS (x, y) wid _ _ =
        [ fill color (Gr.rectangle-round r (x, y -' dpt) (x +' wid, y +' hgt)) ]
      in
      let decoH (x, y) wid _ _ =
        [ fill color (Gr.rectangle-round-left r (x, y -' dpt) (x +' wid +' extra, y +' hgt)) ]
      in
      let decoM (x, y) wid _ _ =
        [ fill color (Gr.rectangle (x, y -' dpt) (x +' wid +' extra, y +' hgt)) ]
      in
      let decoT (x, y) wid _ _ =
        [ fill color (Gr.rectangle-round-right r (x -' extra, y -' dpt) (x +' wid, y +' hgt)) ]
      in
      (decoS, decoH, decoM, decoT)
    in

    let ib = read-inline ctx (embed-string code) in
    inline-frame-breakable pads (rectangle-round-fill 2pt 1pt config#color-example-bg) ib
      |> script-guard Latin

  let document bt =
    let config = SlydifiParam.get config in
    let hookf _ _ =
      let numpages = SlydifiParam.get page-num in
      register-cross-reference `pagecount` (arabic numpages)
    in
    let init-ctx ctx =
      ctx |> config#font-normal
          |> set-text-color config#color-normal-fg
          |> set-code-text-command (command \code)
    in
    SlydifiScheme.document-scheme layout init-ctx hookf bt

% frames

  let frame-master config =
    let f ctx () =
      (block-nil, [
        Gr.rectangle (0pt, 0pt) (layout#paper-width, layout#paper-height)
          |> fill config#color-normal-bg
      ])
    in
    Frame.make layout f

  let frame-master-with-footer config =
    let f ctx () =
      % frame-master の graphics list を踏襲する
      let (_, gr-frame-master) = frame-master config |> Frame.embed ctx () in

      let pagenum = SlydifiParam.get page-num in
      let total = get-cross-reference `pagecount` |> Option.from `1` in

      let gr-page-number =
        let it-pagenum = pagenum |> arabic |> embed-string in
        let it-total = embed-string total in
        let pagenum-ymin = layout#paper-height -' config#length-frame-title-height +' 1.5mm in

        let ib =
          let ib-pagenum =
            let ctx-pagenum =
              ctx |> config#font-pagenum-now
                  |> set-text-color config#color-alert-fg
            in
            read-inline ctx-pagenum {#it-pagenum;} 
          in  
          let ib-total =
            let ctx-total =
              ctx |> config#font-pagenum-total
                  |> set-text-color config#color-alert-fg
            in
            read-inline ctx-total {/#it-total;}
          in
        ib-pagenum ++ ib-total
        in

        let pos = (xrel 1.0 -' config#length-frame-footer-xmargin, pagenum-ymin) in
      SlydifiGraphics.put-text (1.0, 0.0) pos ib

      in

      let gr-progress-bar =
        let progress =
          let float-pagenum = float pagenum in
          let float-total =
            let int-total = Int.of-string total in
            float (if int-total <= 1 then 2 else int-total)  % ゼロ割などの回避
          in
          (float-pagenum -. 1.) /. (float-total -. 1.)
        in
        let x = (layout#paper-width *' progress) in
        let bar-done =
          Gr.rectangle (0pt, config#length-indicator-line-thickness) (x, 0pt)
            |> fill config#color-indicator-done
        in
        let bar-total =
          Gr.rectangle (0pt, config#length-indicator-line-thickness) (layout#paper-width, 0pt)
            |> fill config#color-indicator-total
        in
        [ bar-total; bar-done; ]
      in

      (block-nil, [gr-frame-master; gr-progress-bar; gr-page-number; ] |> List.concat)
    in
    Frame.make layout f

  let frame-slide-title config =
    let f ctx content =
      % frame-master の graphics list を踏襲する
      let (_, gr-frame-master) = frame-master config |> Frame.embed ctx () in

      let title-mgn = 30pt in

      let title-block-height = 0.4 in

      let gr-background =
        [
          Gr.rectangle (0pt, yrel title-block-height) (xrel 1.0, yrel 1.0) |> fill config#color-normal-fg;
        ]
      in

      let gr-title =
        let ctx = ctx |> config#font-slide-title |> set-text-color config#color-normal-bg in
        let iblst = content#title |> List.map (read-inline ctx) in
        let pos = (xrel 0.5, yrel title-block-height +' title-mgn) in
        SlydifiGraphics.put-texts
          (| align = (0.5, 0.0); text-align = 0.5; leading = (get-font-size ctx *' 1.6) |)
            pos iblst
      in

      let gr-author =
        let ctx = ctx |> config#font-slide-author |> set-text-color config#color-normal-fg in
        let iblst = content#author |> List.map (read-inline ctx) in
        let pos = (xrel 0.5, yrel title-block-height -' title-mgn) in
        SlydifiGraphics.put-texts
          (| align = (0.5, 1.0); text-align = 0.5; leading = (get-font-size ctx *' 1.6) |)
            pos iblst
      in

      let gr-date =
        let ctx = ctx |> config#font-slide-date |> set-text-color config#color-normal-bg in
        let iblst = content#date |> List.map (read-inline ctx) in
        let pos = (xrel 0.5, yrel 0.15) in
        SlydifiGraphics.put-texts
          (| align = (0.5, 1.0); text-align = 0.5; leading = (get-font-size ctx *' 1.6) |)
            pos iblst
      in

      (block-nil, [gr-frame-master; gr-background; gr-title; gr-author; gr-date] |> List.concat)

    in
    Frame.make layout f

  let frame-section-title config =
    let f ctx content =
      % frame-master の graphics list を踏襲する
      let (_, gr-frame-master) = frame-master config |> Frame.embed ctx () in

      % 設定
      let title-mgn = 24pt in

      % タイトルのグラフィックス
      % TODO: 目次をつける
      let gr-title =
        let grf clr =
          let ctx = ctx |> config#font-section-title |> set-text-color clr in
          let iblst = content#title |> List.map (read-inline ctx) in
          SlydifiGraphics.put-texts
            (| align = (0.5, 0.0); text-align = 0.5; leading = (get-font-size ctx *' 1.6) |)
              (0pt, title-mgn) iblst
        in
        let gr-title = grf config#color-normal-fg
          |> List.map (shift-graphics (xrel 0.5, yrel 0.45))
        in
        [gr-title;] |> List.concat
      in

      (block-nil, [gr-frame-master; gr-title] |> List.concat)

    in
    Frame.make layout f

  let frame-normal config =
    let f ctx content =
      % content#footer の値に応じてフッターをつけるかどうか変える
      let (_, gr) =
        if content#footer then
          frame-master-with-footer config |> Frame.embed ctx ()
        else
          frame-master config |> Frame.embed ctx ()
      in

      let title-ymin = layout#paper-height -' config#length-frame-title-height in

      let gr-separator =
        let xleft = config#length-frame-title-left-margin in
        let xright = layout#paper-width -' config#length-frame-title-left-margin in
        let y = title-ymin -' config#length-frame-title-bot-margin in
        [Gr.line (xleft, y) (xright, y) |> stroke 1pt config#color-separator]
      in

      % タイトルのブロックボックス列
      let gr-title =
        let ctx-title = ctx
          |> config#font-frame-title |> set-text-color config#color-alert-fg
        in
        let ib-title = read-inline ctx-title content#title in
        [draw-text (config#length-frame-title-left-margin, title-ymin) ib-title]
      in

      % 中身のブロックボックス列
      let bb-inner =
        let ctx = ctx |> config#font-normal |> set-text-color config#color-normal-fg in
        let bb-blank skip =
          line-break false false (ctx |> set-paragraph-margin 0pt skip) inline-fil
        in
        bb-blank (config#length-frame-title-height +' config#length-frame-body-top-margin)
          +++ (read-block ctx content#inner)
      in

      (bb-inner, [gr; gr-separator; gr-title] |> List.concat)

    in
    Frame.make layout f

% frame commands

  let-block ctx +make-title content =
    read-block ctx '<
      +SlydifiScheme.genframe(frame-slide-title (SlydifiParam.get config))(1)(content);
    >

  let-block ctx +section ?:short-name title inner =
    let bb-section = read-block ctx '<
      +SlydifiScheme.genframe(frame-section-title (SlydifiParam.get config))(1)(|title = title;|);
    >
    in
    let it-title =
      let default = title |> List.fold-left (fun it1 it2 -> {#it1;#it2;}) {} in
      short-name |> Option.from default
    in
    let () = section-name |> SlydifiParam.set it-title in
    let bb-inner = read-block ctx inner in
    let () = section-name |> SlydifiParam.discard in

    bb-section +++ bb-inner

  let-block ctx +section-noframe ?:short-name inner =
    let it-title =
      short-name |> Option.from {}
    in
    let () = section-name |> SlydifiParam.set it-title in
    let bb-inner = read-block ctx inner in
    let () = section-name |> SlydifiParam.discard in
    bb-inner

  let-block ctx +frame ?:n-frame title inner =
    let () = page-num |> SlydifiParam.set (SlydifiParam.get page-num + 1) in
    let n-frame = n-frame |> Option.from 1 in
    read-block ctx '<
      +SlydifiScheme.genframe(frame-normal (SlydifiParam.get config))(n-frame)(|title = title; inner = inner; footer = true|);
    >

  let-block ctx +frame-nofooter ?:n-frame title inner =
    let () = page-num |> SlydifiParam.set (SlydifiParam.get page-num + 1) in
    let n-frame = n-frame |> Option.from 1 in
    read-block ctx '<
      +SlydifiScheme.genframe(frame-normal (SlydifiParam.get config))(n-frame)(|title = title; inner = inner; footer = false|);
    >

  let-block ctx +namedframe name title inner =
    let () = page-num |> SlydifiParam.set (SlydifiParam.get page-num + 1) in
    read-block ctx '<
      +SlydifiScheme.namedframe(frame-normal (SlydifiParam.get config))(name)(|title = title; inner = inner; footer = true|);
    >

  let-block ctx +againframe ?:lyr name =
    let () = page-num |> SlydifiParam.set (SlydifiParam.get page-num + 1) in
    match lyr with
    | Some(lyr) -> read-block ctx '<
      +SlydifiScheme.againframe?:(lyr)(name);
    >
    | None -> read-block ctx '<
      +SlydifiScheme.againframe(name);
    >

  let-block ctx +centering it =
    line-break true true ctx
     (inline-fil ++ read-inline ctx it ++ inline-fil)

% inline commands

  let-inline ctx \emph ?:dcf it =
    let config = SlydifiParam.get config in
    let dcf = Option.from (fun _ -> true) dcf in
    let ctx2 =
      SlydifiOverlay.select-from-two dcf (
        ctx |> config#font-bold
            |> set-text-color config#color-alert-fg
      ) ctx
    in
    read-inline ctx2 it

  let-inline ctx \textbf ?:dcf it =
    let config = SlydifiParam.get config in
    let dcf = Option.from (fun _ -> true) dcf in
    let ctx2 =
      SlydifiOverlay.select-from-two dcf (config#font-bold ctx) ctx
    in
    read-inline ctx2 it

  let-inline ctx \link ?:text url =
    let config = SlydifiParam.get config in
    match text with
    | Some(text) ->
        let ctx =
          ctx |> set-text-color config#color-example-fg
        in
        read-inline ctx {\href(url)(text);}
    | None ->
        let text = embed-string url in
        let ctx =
          ctx
            |> config#font-code
            |> set-text-color config#color-example-fg
        in
        read-inline ctx {\href(url)(text);}

  let-block ctx +quote bt =
    let config = SlydifiParam.get config in
    let deco (x, y) w h d =
      [
        fill config#color-quote-line (Gr.rectangle (x, y) (x +' 4pt, y +' h))
      ]
    in
    block-frame-breakable ctx (15pt, 0pt, 10pt, 10pt)
      (deco, deco, deco, deco)
        (fun ctx -> (
          let ctx2 = ctx
            |> set-text-color config#color-quote
            |> config#font-quote
          in
          (read-block ctx2 bt)
        ))

% listing

  let-inline ctx \label-dia =
    let config = SlydifiParam.get config in
    let fsize = get-font-size ctx in
    let grf (x, y) =
      let edge = Rail.( init |> push-line (fsize *' 0.22, fsize *' 0.22) ) in
      let gr =
        Rail.(map-repeat (fun i -> edge ^ (90. *. (float i))) 4)
          |> Rail.to-loop (x +' fsize *' 0.25, y +' fsize *' 0.1)
          |> fill config#color-bullet-dia
      in
      [gr]
    in
    inline-graphics 25pt 8pt 0pt grf

  let-inline ctx \label-tria =
    let config = SlydifiParam.get config in
    let fsize = get-font-size ctx in
    let grf (x, y) =
      let gr =
        Rail.(
          init |> push-line (fsize *' 0.4, fsize *' 0.2)
               |> push-line (0pt -' fsize *' 0.4, fsize *' 0.2)
               |> push-line (0pt, 0pt -' fsize *' 0.4)
               |> to-loop (x, y +' fsize *' 0.1)
        ) |> fill config#color-bullet-tria
      in
      [gr]
    in
    let path (x, y) =
      let yc = y +' fsize *' 0.3 in
      let xl = x in
      let xr = x +' fsize *' 0.4 in
      let yu = yc +' fsize *' 0.2 in
      let yd = yc -' fsize *' 0.2 in
      start-path (xl, yu)
        |> line-to (xr, yc)
        |> line-to (xl, yd)
        |> close-with-line
    in
    let gr (x, y) = [fill config#color-bullet-tria (path (x, y))] in
    inline-graphics 20pt 8pt 0pt grf

  let-inline ctx \label-circ =
    let config = SlydifiParam.get config in
    let fsize = get-font-size ctx in
    let path (x, y) =
      let cx = x +' fsize *' 0.3 in
      let cy = y +' fsize *' 0.3 in
      let r = fsize *' 0.23 in
      Gr.circle (cx, cy) r
    in
    let gr (x, y) = [fill config#color-bullet-circ (path (x, y))] in
    inline-graphics 30pt 8pt 0pt (gr)


  let-inline ctx \label-thus =
    let config = SlydifiParam.get config in
    let fsize = get-font-size ctx in
    let path (x, y) =
      let cy = y +' fsize *' 0.4 in
      let cx = x +' fsize *' 0.8 in

      let path-bot =
        Gr.line (x,cy) (cx, cy)
          |> stroke 4pt config#color-bullet-thus
        in
      let path-top1 =
        Gr.line (cx +' 1.1pt ,cy -' 1.7pt) (cx -' fsize *' 0.3, cy +' fsize *' 0.3)
          |> stroke 4pt config#color-bullet-thus
        in
      let path-top2 =
        Gr.line (cx,cy) (cx -' fsize *' 0.3, cy -' fsize *' 0.3)
          |> stroke 4pt config#color-bullet-thus
        in
      [path-bot; path-top1; path-top2] in
    let gr (x, y) = path (x,y) in
    inline-graphics 30pt 8pt 0pt gr

  let label-thus =
    let labelf ctx idx = 
      let config = SlydifiParam.get config in
      let fsize = get-font-size ctx in
      let path (x, y) =
        let cy = y +' fsize *' 0.4 in
        let cx = x +' fsize *' 0.8 in
  
        let path-bot =
          Gr.line (x,cy) (cx, cy)
            |> stroke 4pt config#color-bullet-thus
          in
        let path-top1 =
          Gr.line (cx +' 1.1pt ,cy -' 1.7pt) (cx -' fsize *' 0.3, cy +' fsize *' 0.3)
            |> stroke 4pt config#color-bullet-thus
          in
        let path-top2 =
          Gr.line (cx,cy) (cx -' fsize *' 0.3, cy -' fsize *' 0.3)
            |> stroke 4pt config#color-bullet-thus
          in
        [path-bot; path-top1; path-top2] in
      let gr (x, y) = path (x,y) in
      inline-graphics 30pt 8pt 0pt gr
    in
    EnumitemFormat.new-ordered labelf

  
  let-inline ctx \label-ok =
    let config = SlydifiParam.get config in
    let fsize = get-font-size ctx in
    let path (x, y) =
      let cy = y +' fsize *' 0.1 in
      let cx = x +' fsize *' 0.3 in

      let path-sub1 =
        Gr.line (cx -' fsize *' 0.2 ,cy +' fsize *' 0.2) (cx +' 1.1pt, cy -' 1.7pt)
          |> stroke 4pt config#color-bullet-ok
        in
      let path-sub2 =
        Gr.line (cx,cy) (cx +' fsize *' 0.5, cy +' fsize *' 0.5)
          |> stroke 4pt config#color-bullet-ok
        in
      [path-sub1; path-sub2] in
    let gr (x, y) = path (x,y) in
    inline-graphics 30pt 8pt 0pt gr


  let label-ok =
   let labelf ctx idx = 
    let config = SlydifiParam.get config in
    let fsize = get-font-size ctx in
    let path (x, y) =
      let cy = y +' fsize *' 0.1 in
      let cx = x +' fsize *' 0.3 in

      let path-sub1 =
        Gr.line (cx -' fsize *' 0.2 ,cy +' fsize *' 0.2) (cx +' 1.1pt, cy -' 1.7pt)
          |> stroke 4pt config#color-bullet-ok
        in
      let path-sub2 =
        Gr.line (cx,cy) (cx +' fsize *' 0.5, cy +' fsize *' 0.5)
          |> stroke 4pt config#color-bullet-ok
        in
      [path-sub1; path-sub2] in
    let gr (x, y) = path (x,y) in
    inline-graphics 30pt 8pt 0pt gr
  in
  EnumitemFormat.new-ordered labelf


  let-block ctx +thusitem it inner =
    read-block ctx'< +item?:(label-thus)(it)(inner); >

  let-block ctx +okitem it inner =
    read-block ctx'< +item?:(label-ok)(it)(inner); >



  let-rec power-float-int r m =
    match m with
    | 0 -> 1.
    | _ -> (power-float-int r (m - 1)) *. r

  let listing-itemfmt ctx idxlst =
    let fsize =
      let config = SlydifiParam.get config in
      get-font-size (config#font-normal ctx)
    in
    let context-body ctxorig _ =
      let shrink-ratio =
        let depth = List.length idxlst in
        0.9 |> Float.pow (float (depth - 1))
          |> Float.max 0.85
          |> Float.min 1.0
      in
      ctxorig |> set-font-metrics (fsize *' shrink-ratio)
    in
    let fmt =
      {|\label-circ;|\label-dia;|\label-tria;|\label-tria;|\label-circ;|}
        |> List.map EnumitemAlias.text-label |> EnumitemAlias.with-depth
        |> EnumitemFormat.set-context-body context-body
    in
    fmt ctx idxlst

  let thuslisting-itemfmt ctx idxlst =
    let fsize =
      let config = SlydifiParam.get config in
      get-font-size (config#font-normal ctx)
    in
    let context-body ctxorig _ =
      let shrink-ratio =
        let depth = List.length idxlst in
        0.9 |> Float.pow (float (depth - 1))
          |> Float.max 0.85
          |> Float.min 1.0
      in
      ctxorig |> set-font-metrics (fsize *' shrink-ratio)
    in
    let fmt =
      {|\label-thus;|}
        |> List.map EnumitemAlias.text-label |> EnumitemAlias.with-depth
        |> EnumitemFormat.set-context-body context-body
    in
    fmt ctx idxlst


  let-block ctx +listing ?:itemfmt item =
    let itemfmt = itemfmt |> Option.from listing-itemfmt in
    read-block ctx '< +listing?:(itemfmt)(item); >

  let-inline ctx \listing ?:itemfmt item =
    let itemfmt = itemfmt |> Option.from listing-itemfmt in
    read-inline ctx {\EnumitemAlias.listing?:(itemfmt)(item);}

  let-block ctx +itemize ?:itemfmt bt =
    let itemfmt = itemfmt |> Option.from listing-itemfmt in
    read-block ctx '< +itemize(itemfmt)(bt); >

  let-block +ditem dt it-dd bt-dd =
    '<
      +EnumitemAlias.ditem?:(fun it -> {\emph{#it;}})(dt)(it-dd)(bt-dd);
    >

  let-block +oitem dcf it bt =
    '< +ghost(dcf)< +item(it)(bt); > >

  let-block ctx +thuslisting?:itemfmt item =
    let itemfmt = itemfmt |> Option.from thuslisting-itemfmt in
    read-block ctx '< +listing?:(itemfmt)(item); >

  let-inline ctx \thuslisting ?:itemfmt item =
    let itemfmt = itemfmt |> Option.from thuslisting-itemfmt in
    read-inline ctx {\EnumitemAlias.listing?:(itemfmt)(item);}


  let-inline ctx \footnotetext ref-label it =
    let config = SlydifiParam.get config in
    let bbf num =
      let it-num = embed-string (arabic num) in
      let ctx = config#font-footnote ctx in
        line-break false false ctx (read-inline ctx {#it-num; #it;} ++ inline-fil)
    in
      FootnoteScheme.main ctx (Some(ref-label)) (fun _ -> inline-nil) bbf

  let-inline ctx \footnotemark ref-label =
    let size = get-font-size ctx in
    let ctx =
      ctx |> set-font-size (size *' 0.75)
          |> set-manual-rising (size *' 0.25)
    in
    let ctx =
      ctx |> set-font-size (size *' 0.75)
          |> set-manual-rising (size *' 0.25)
    in
    match FootnoteScheme.get-footnote-num ref-label with
    | Some(n) ->
      let it-num = embed-string n in
      read-inline ctx {\*#it-num;}
    | _ ->
      read-inline ctx {\*?}

  let-inline ctx \footnote it =
    let config = SlydifiParam.get config in
    let size = get-font-size ctx in
    let ibf num =
      let it-num = embed-string (arabic num) in
      let ctx =
        ctx |> set-font-size (size *' 0.75)
            |> set-manual-rising (size *' 0.25)
      in
        read-inline ctx {\*#it-num;}
    in
    let bbf num =
      let it-num = embed-string (arabic num) in
      let ctx = config#font-footnote ctx in
        line-break false false ctx (read-inline ctx {#it-num; #it;} ++ inline-fil)
    in
      FootnoteScheme.main ctx None ibf bbf


%% code 

  let-block ctx +code lang code = 
    let size = 
      (get-font-size ctx) *' 0.85
    in
    read-block ctx '< 
    +code-printer ?:(
      CodePrinter.make-config lang CodeTheme.tokyo-night
      |> CodePrinter.set-basic-font-size size
    )(code);
    >


%% block 

  let make-block ctx color-frame-text color-bg-text color-title-text ?:title ?:tag ?:opts blk = 
    let ib-title =
          match title with
          | None ->   {}
          | Some(title) -> {#title;}
    in
    let user-opts = match opts with
          | None -> []
          | Some(uos) -> uos in
    let bctx =
      let size = get-font-size ctx in
      set-font-size (size *' 0.8) ctx
    in
    let opts = List.append user-opts
      [ 
       lefttitle 10pt; righttitle 10pt; toptitle 3.5pt; bottomtitle 3.5pt;
       colframe (Color.of-css color-frame-text);
       coltitle (Color.of-css color-title-text);
       fonttitle [bold; font-size 24pt];
       left 10pt; right 10pt; top 10pt; bottom 10pt;
       colback  (Color.of-css color-bg-text);
      ]
    in
    read-block bctx '<
      +colorbox 
        (opts)
        ?:(ib-title)
        <+p{#blk;}>
    >
  
  let-block ctx +block = make-block ctx `#3c372d` `#fffae6` `#fffefa` 
  let-block ctx +textblock = make-block ctx `#fffefa` `#fffefa` `#3c372d`
  let-block ctx +alertblock = make-block ctx `#732346` `#e5c3be` `#fffefa`
  let-block ctx +exampleblock = make-block ctx `#5a7323` `#e1f0c8` `#fffefa`
  
  let-mutable theorem-number <- 0

  let make-theorem ctx header ?:title ?:tag ?:opts blk = 
    let () = theorem-number <- !theorem-number + 1 in
    let txt-header = header ^ arabic !theorem-number in
    let () = match tag with
              | None -> ()
              | Some(tag) -> 
                register-cross-reference tag txt-header
    in
    let str-title = embed-string txt-header in
    let ib-title =
          match title with
          | None ->   {#str-title;}
          | Some(title) -> {#str-title;. #title;}
    in
    let user-opts = match opts with
          | None -> []
          | Some(uos) -> uos in
    let bctx =
      let size = get-font-size ctx in
      set-font-size (size *' 0.8) ctx
    in
    let opts = List.append user-opts
      [ 
        lefttitle 10pt; righttitle 10pt; toptitle 2.5pt; bottomtitle 2.5pt;
        fonttitle [bold];
        colframe (Color.of-css `#3c372d`);
        coltitle (Color.of-css `#fffefa`);
        left 10pt; right 10pt; top 10pt;bottom 10pt;
        colback (Color.of-css `#fffae6`);
      ]
    in
    read-block bctx '<
      +colorbox 
        (opts)
        ?:(ib-title)
        %<+p{\font-style[font-size 20pt]{#blk;}}>
        <+p{#blk;}>
    >
  
  let-block ctx +defn = make-theorem ctx `定義`
  let-block ctx +thm = make-theorem ctx `定理`
  let-block ctx +cor = make-theorem ctx `系`
  let-block ctx +lem = make-theorem ctx `補題`



end

let document = SlydifiThemeArctic.document
